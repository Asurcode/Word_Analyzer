
YULIIA ZHUKOVETS: This is CS50 Week 1, section on C. So if this is the video
you were expecting to hear, you are definitely in the right place.
My name is Yuliia.
I'm a preceptor here at Harvard.
Here's my email address.
If you have any questions or would like to get in touch,
I was actually some years ago a TA at Yale where we also teach CS50,
and now I joined the team on the Harvard side
and helping them out with the Harvard College class here on campus, and also,
supporting all of our students online.
So as I mentioned just now, this is week 1 of CS50,
and we're going to talk about C. So this is really where everything begins.
And we're going to dive into some building
blocks that are really going to help us throughout the whole semester.
And some things on the agenda for today are variables and operators,
so the most basic, basic, basic things that we need to get started.
We're going to talk about functions, what
are functions, what parameters functions use, how to define functions,
how to use them.
We're going to chat about conditionals and loops,
so something that will be really handy in our problem
set, and again, just one of those stepping stones
to get us through the next weeks.
And we'll get a little taste of problem set 1.
We're going to talk about Mario, how to build those bricks
and stack a little, nice pyramid.
So without further ado, let's get started,
and let's talk about variables, types, input, and printing.
So you might recall that during lecture, we talked about a phone book.
Professor Malan showed an example where, if we're
looking for some contact or a person, we might flip through the pages
or might go to the middle and use a more efficient algorithm
of finding that person.
Well, today we're taking sort of a step down
from the idea of searching to how are those phone books comprise.
What are the components of those?
So you might imagine that one of the variables in a phone book is called
"calls."
So maybe it is the number of calls that one of your friend called you.
And maybe they called you 4 times.
So you can imagine having this square or a little box that
stores some value, in this case, 4.
And it is called--
it's called "calls."
So what actually is going on underneath the hood?
What is the code that enables us to have this little square with the number 4?
Well, it can sound--
it can look a little cryptic for now, but we will parse it together.
So in order to get this box with number 4 in it,
the line of code we would use is "int calls equals 4."
And as such, there are 4 components to it.
The first one is name, variable name, and it
can be whatever sort of word or phrase you would prefer,
sort of like calls or name, age, address you're going to see a little later.
Next one is type.
This is very important.
We need to tell C exactly what type of value it
should expect to receive on its end.
So in this case, it is integer, to specify
just a number that doesn't have any floating point, just
one number, integer.
Then, the value itself, if we created this box that is called "calls"
and we're supposed to put an integer into it, we're going to put 4 into it.
That is our value.
And lastly, sort of what brings everything together
is the assignment operator, the equals sign.
And you might also read it like this.
"Create an integer named calls that gets the value--" oops--
"that gets the value 4," combining all of our 4 components together to create
this variable.

All right, so let's practice one more time.
Maybe someone in the chat could type in a similar definition that we just saw.
We have int x equals sign and 50.
How could we combine it in one sentence in a way that we saw earlier here?

Someone in the chat if you guys want to type it out?

So we have integer x equals 50.
How can we bring it all together into one sentence?

All right, seeing none, but this is how you would say it.
"Create an integer named x that gets the value 50."
Just reading left to right--
yeah, exactly.
"Create an integer named x that gets the value 50."
So creating these sentences in your head and relating code to plain English
or whatever language you are studying CS in
can really help you get through these first few steps
of getting used to how to write code and how to phrase it properly.
Well, let's take it a step further.
So what if we--
what if my friend called me another time?
They just gave me a call.
And now, the value is, of course, it should be five.
So how can I change that?
Well, we can use a simple reassignment.
So in the beginning, if we created int calls equals 4, that was our initial box
we create.
And then, we want to assign it to five, what
we can do is just have a second line of code
where we specify, well, now the value of calls should be five and not 4.
And therefore, the value inside of our box will change as well.
And again, translating it to plain English,
the way it would look like is calls, the variable name,
gets five, combining the name, the assignment operator, and the value
together.
Well, what if it's not just a plain number?
What if we want to make some changes, for example,
incrementing by one every time my friend or my mom gives me a call?
Well, we can also use different operations as we're reassigning.
So, for example, if we want to add plus one, we can do that on the second line.
So calls equals calls plus one.
Or if we want to subtract one, it would be very similar but calls minus one.
But it gets a little confusing when we have calls equals calls minus one.
It's just, how can I take calls and then assign it back to calls?
This is, again, where it gets a little confusing.
But actually, what's going on, we're first
taking a look at the right-hand side.
We're grabbing our value 4 that was in our little box before.
And so we're doing the operation 4 for minus one, which will be three,
and then assigning it back to our variable calls
in such a way creating the new box that contains value three.
And you can also use multiplication and division,
sort of the same idea of grabbing the initial value that we had
and changing it and reassigning it.
We could also do-- yeah, I see someone in the chat saying we can also do calls
++.
If we just want to increment by one, ++ is a very useful operator we will see
shortly when we're talking about for loops.
But let me pause here for a second and ask
what questions do we have about variables, reassignment, operators?
This was sort of our first chunk of information.
So if you have any questions, feel free to type them in the chat.

OK, well, let's give it a few more seconds.
Yeah, and feel free to put any questions you have in the chat throughout,
and then I'll try to take a little peek and then address them as we go.
All right, seeing none so let's move on.
So say I didn't have that number of calls stored in the phone book just yet.
I wanted to get it from the user.
So how could we do that?
How can we get input from the user?
Well, there are a few ways we can do it.
In this case, if we're trying to get an input that is a number, an integer,
we might want to use a function called get_int.
And again, the way that it's structured, we
can break it down in several components.
We are starting with our function.
So this is the tool that will allow us to grab this input from the user
and then store it in our proverbial box.
So if we have function, get_int, what it takes in--
I guess coming back a little bit, the first part is the function name.
Get_int is something that was defined before, is actually defined by CS50,
and this is in the library CS50.H that you can also
read a little bit more about.
But someone once upon a time wrote this function
that we now can use to grab these values.
Inside of the function is function input.
In this case, it is calls.
So we're prompting the user to input the number of calls in the terminal
that we can then later use.
And then, our next component is talking about--
OK, so we've looked at the code for this function, but how does it actually work?
A lot of moving pieces.
So we can imagine this box that represents the get_int function.
So something will go into the box, and something will come out of the box.
So what goes into the box?
What goes in the box is prompt.
So in this case, it is calls.
And what we get out from it is some kind of number that
is stored in the variable, calls.
Or if we give a specific example, that could be, quote, unquote,
"calls colon space" to give space for our user.
And then, we get back 4 that we will then store in our variable.
And this is, again, where we come back to assignment.
So we got this number 4 back.
So what is actually going on?
We're going to take this value.
And then, we're going to store it in the calls, calls variable.
So zooming out again, we created an integer
named calls that gets the value 4.
So before this four was even on the picture,
we had this whole get_int function where we prompted the user.
We got the number back.
And now, we're using this return value to store it in the variable, calls--
so again, coming back to our idea of having this little box that
stores some kind of number.
OK, I see a question.
I have a question about format codes.
What's the difference between percent I and percent D?
That's a great question.
So %i and %d are interchangeable.
They're both used for integers if we want to print them out,
which is a perfect segue because we're going to talk
about printing values in just a second.
But %d is a little deprecated, and we've been using %i since.
So definitely, default to that.
But as someone in the chat, how to print out values, right?
So for example, we had our value int calls 4,
and now we want to print it out.
Well, for that, we can use function, printf.
And so we can have our string.
So just printing out the number doesn't really mean anything.
It is nice to give some kind of context.
So in quotes, we can put "calls equals," and then %i would be the placeholder,
the placeholder for our variable because if we did something like calls equals
calls, well, that's just text.
It wouldn't really print out "calls equals 4."
It's just going to print out "calls equals calls."
That's not what we want.
So to avoid that, we're going to have our placeholder or format code.
So %i is one of the options that's used for integers.
And then, the second component is having the value,
the variable that stores the value that we want to print out--
so putting these pieces together.
And there are other types and format codes.
So for example, for integers, sorry, for numbers,
we can also use floats for that.
In that case, it would be %f.
For text, we'll be looking into chars and strings in just a second.
And then, true or false, there are Boolean, type of Boolean.
We're using %i as well.
So next we're actually going to write our own program.
So if you want to pull up cs50.dev with me right now or just follow along,
feel free to do that.
But I'm going to pause again and take questions, any questions that folks
have right now.
Questions on printing, types, functions, variables,
anything that we just touched upon?

OK, seeing none but definitely feel free to pop them into the chat
as we're chatting along.
But let's move over to cs50.dev now, which is
our environment where we write codes.
Where can I write programs is a question in the chat.
That's a great question.
So for that, we use cs50.dev, which is the Visual Studio Code for CS50.
It's this virtual IDE where students and teachers, and really, anyone
could use to get started with programming, write their own programs.
It is simplified version of the desktop Visual Code that
might be familiar to someone and should be really easy to use and get started.
Well, let's go back to the problem we're trying to solve.
We're going to write a program that prints out "Hello, world,"
which is also the first step of problem set 0.
So we can start checking off some boxes on our list of programs to complete.
So to start, let's create this program, and I'm going to call it Hello.
So I'm going to create a file called hello.c.
And again, there are several components that go into writing a program.
The first one is including the libraries.
So I'm going to include stdio.h.

this will allow me to run my program.
And then, I'm going to create a function, a main function,
like int main(void).
So in every program in this course and probably in the future,
there's going to be a main function, the main component of your program
that's going to be responsible for things.
And inside of it, let's use the printf function
that we just saw earlier in the slides.
And what we're going to do, we're going to print out "Hello, world."
Semicolon, and those are a little tricky,
and odds are you'll probably forget it not once,
not twice, probably many more times.
But it is just getting into the habit of it.
So let's go back to the terminal and now run make hello to compile.
OK, compiles.
And now, we're going to run hello.
And.
it's not pretty.
It's on the same line with my dollar sign.
So how could I fix that?
How can I separate it into a new line right here?
Exactly, so I can use backslash n, which will give me a new line.
And I'm going to run.
Hello again.
Not working.
OK, what step am I missing here?
I changed.
I added my escape character now.
I added the new line, but I keep running hello, and it's--
exactly, I need to make hello again.
So I-- every time you make any changes, make
sure you make the program again so that all the changes are now reflected.
And boom, we have "hello, world" right here in our terminal on its own line.
Any questions about this?
This is sort of one of those--

one of the first programs that everyone writes, the "Hello, world" one.
And I think even though it's a little simple,
there's still mistakes you can make.
There's the new line character you might forget
or the semicolon or even including the library.
So you can feel a little proud of yourself even for getting that far.
Question in the chat, there's another type like backslash n?
Yeah, so this is sort of the escape character
that we were just talking about.
So for certain things, you will need that.
For example, if I wanted to use quotes around "Hello,"
I can't just put double quotes by themselves because the program is going
to read it as if I'm just trying to create a separate string.
What I could do is use an escape character
and then put hello in the quotes in such a way.
So let's show it.
Make Hello.
Hello.
So now, I have my quotes around hello.
Let me get rid of this so that we can go back to what we saw before.
I'm going to make hello again, run it.
OK, hello, world.
Now, let's go back to our slides and see.
The next thing we're going to accomplish is let's write a program, "Hello, me"
or "Hello, your name" to complete the second set of problem set 0.
Going back to cs50.dev now, and let's keep editing just in this file, hello.c.
So my name is Yuliia.
And I could just do, "Hello, Yuliia."
I'm going to make hello.
I'm going to run hello.
Hello, Yuliia.
So this does a trick.
This is it.
The program is done.
We can now move on to our next challenge.
What could we change here to actually make it say, "Hello, name, Hello,
Daniel."

Exactly, we can get user input.
So instead of just hard coding Yuliia, baking it inside of my code,
I can do something different.
I can, again, get input from the user.
So for that, I'm going to create a variable called name,
and it's going to have type string, which is what we use for words.
I'm going to use another function called get_string.
Very similar to get_int, it's just meant to getting strings from users,
not integers.
And then, I'm going to ask, "what is your name?"
Leaving space, not forgetting about the semicolon.
And then here, I'm going to say, "Hello, name."
OK, make hello.
Oh, OK, here's our first error, right?
They're super cryptic.
This is a lot--
use of undeclared identifier, Did you mean stdin?

Very cryptic.
Nica is saying, "include cs50."
Exactly, great thinking.
So what I didn't mention earlier when we were talking about get_int
is that they're coming from the CS50 library.
So for that, I'm going to include cs50.h.

And so this will allow us to use now string
and get_string to get user's input.
So let's make hello again.
Let's run hello.
What is your name, Yuliia?
Uh-oh, hello, name.
Isn't supposed to print, "Hello, Yuliia?"
What is going on here?
OK, Nica's saying &as, but where does exactly that %as go?

Uh-huh, OK, after me, exactly, instead of name.
Perfect, yeah.
You guys are so good at it.
So instead of just baking in just string name inside of my input of printf,
I actually want to make it dynamic, right?
I want to be able to change it.
So for that, I'm going to go back to our placeholders or these percent operators.
And after the comma, I'm going to put name.
So what I'm saying is the text itself is going to be "Hello, comma, space",
and then I'm saving a placeholder for a value stored in variable name that is
of type string.
So you see how these pieces are connecting between each other, string
name, variable names of type string?
So we use a %as operator.
All these pieces are connected together.
So now, let's make hello again.
Let's run it.
What is your name?
Yuliia.
Yay, OK, this is going well.
Let's try it again.
Hello, what is your name, for example, David?
Hello, David.
All right, so let me scroll.
I see some questions in the chat so let me scroll and see.
Gigi's saying, can you explain what %as does?
Yeah, totally.
So remember how just now when we were talking about integers,
we had our placeholder for i so that we can print out variables calls.
So we can't really just bake in calls equals calls.
We have to create some kind of placeholder
to have this dynamic interaction between the variable and grabbing the value.
So a similar thing is going on here.
We want to make sure that we have the placeholder for our variable name
so that whatever user types in, like David Daniel, Andrew, Bob,
doesn't matter, we can put it in inside of our string
that is ultimately in printf.

OK, let's see what other questions we have.

All right.
OK, any other questions about this program, hello, me or hello, world.

OK, all right, seeing none.
So let's move on to our next exercise.
So next, what we're going to do is create a program
that stores and prints out some information,
like name, age, phone number, can be address or hometown of your friends,
so adding some more layers to our hello, me problem.
So for that, let's create a new file called friends.c.
All right, it opened up here in the terminal.
Let's create sort of the same steps that we've done before.
So we want to include stdio.h library.
We want to have int main(void), curly braces.
OK, so what we're going to do next is a few steps.
So let's try to think what attributes my friends can have.
So the first one was name.
That's easy.
That's something that we just talked about.
What other things can we ask our friends to input?

Age, yeah, so maybe age.

Height, yeah, that's a good one.
Let's maybe do hometown.

And maybe, let's do phone number.

All right, so as you might see, these are commented out.
These are not lines of code.
These are not doing anything.
These are comments.
And the way you can do them is by doing two slashes in a row.
So for get name, we're going to do something very similar
that we just did in hello.c, string name, get_String, what is your name.
So let's do just that.
So I'm going to create a variable called string name get_String.
I'm going to ask, what is your name, semicolon.
For age now, I'm going to use an integer.
So oops, I'm going to do int age equals get_int, what is your age?

OK, semicolon.
Same for hometown, I'm going to say string hometown, get_string,
What is your hometown, semicolon.
And then, for phone number, I'm going to do int number equals get_String--
sorry, get_int, what is your phone number?

And I think I forgot to include CS50 library again.
So let's not make the same mistake.
Let's come back and put it here on top.
OK, let's start with this.
Let's make sure we can grab our variables.
Thank you, Ana.
Yep, good eyes.
Forgot to include the library.
So let's make this first and then see if we're getting any errors.
Fingers crossed.
None, that's awesome.
And then, let's run it to see if we're getting all the right inputs that we
want.
So what is your name?
Yuliia.
What is your age?
22.
What is your hometown?
Cambridge.
And then, what is your phone number?
I'm going to say 111-111-1111.
So it didn't like it.
Let me do this again.
So it's prompting me again.
What's going on here?
Why can I not put in my phone number?
Oh, wait, it's a fake phone number.
But-- Yeah, exactly.
So parentheses doesn't count as an infinite string.
So notice how in line 16 right here, I defined
number, the variable to get to call--
excuse me.
I defined number, the variable that's going to store my phone number,
as an int.
But there are a lot of different formats in which you can write it.
Surely, you could have done like 1111111111.
This works.
But what if I want to include the parentheses and the dashes?
So since we're not going to do any mathematical operations with the number,
it is totally fine to just store it in a string
and allow for those different formats to come in.
So let's make this again.
Let's make the terminal slightly bigger, make friends.
Let's run it.

OK.
Yuliia, 22, Cambridge.
Now let's try this format again.

Yay, now it works.
OK, awesome.
So changing it to a string did the trick.
Now, we can put whatever formats we want.
Let me pause here for a second.
Any questions about how we just got all these user inputs?

Yeah, so Paula said, why did we define the output for main as int?
That is a great question.
And actually, Professor Malan is going to address that in the coming lectures.
But this is really a conventional way to write main functions.
So it doesn't necessarily take anything as an input.
So that's why we leave it as void.
But we do expect to get a number from it.
And you can notice that, here, we're not actually returning anything.
Even the printf, the printf action is not actually returning a value.
It's more of a side effect that we have in the terminal.
But good question.

Daniel said, will casting work in this context?
In the context of putting in the user's input, probably no because we
can't even cast something that we haven't received yet.
So we want to make sure we are defining the correct variables right away.
Tatia said, when we use two backslashes, sorry, two slashes, that's
when we want to create comments, right?
So right here, when I'm just leaving little hints for myself to remember what
I was typing.
Let's move along and now print it out.
So we have all these users input that we just got.
Now let's put it all together.
So let's create sort of a lengthy sentence where we're going to say,
"My new friend's name is %s."

And then I'm going to say, "comma %i" for age.
"They are from %s" again because I'm using hometown now.
And "Their phone number is %s" again.
So now, we just need to match it back together.
So the first %s was referring to a name.
The next %s was referring to an age.
The third one was referring to hometown.
And the second one was referring to a number.
So you can, again, see how all these things come back together.
So we started off by creating users input, by grabbing users input,
creating variables, name, age, hometown, number, storing them in the variables
property types.
And then we're printing out all of these variables in a sentence
by using these placeholders.
So let's make this.
So "make friends."
Oops, I forgot a semicolon.
See, I told you it was going to happen at some point.
And it happened to me.
So let's do it again.
So "make friends."
OK, compiles friends.
Let's run it.
What is your name?
Yuliia.
What is your age?
22.
What is your hometown?
Cambridge.
What is your phone number?
1111111111.
OK, "My new friend's name is Yuliia, 22, they are from Cambridge,
and their phone number is 111--" lots of ones.
And I think I'm forgetting a new line because I see that my ones are now
getting on the next one.
So I'm just going to create that here.
Let me compile it again.
What's your name?
Yuliia, 22, Cambridge, 1111111111.
OK, so still going a little bit over the line.
But that is the program that we just wrote.
OK, let me bring the terminal down a little bit.
Ann said, what's the difference between %s and %i?
That's a great question.
So you notice how here we define name as string
and then hometown as string and then number as string as well.
These are sort of text or words.
And this is exactly why we want to create
these different placeholders to distinguish between the different types
that we have.
So placeholder s is for strings or words,
and placeholder i is for integers, which is just numbers.

Gigi said, what does make file name do?
So when we do something like make friends or make hello, what it does,
it takes the machine code and compiles it--
sorry.
It takes the source code and compiles it into machine code
so that the computer can actually read it.
And we will see different kind of variations of this.
For example, Python is interpreted language.
We don't need to compile it before we run it.
The computer does that for us.
But C is a little bit more like lower controlled language.
So we want to make sure we are making or compiling the program
first before we actually run it.
But great questions.
OK, all right, let's move on.
So we've talked about return types and printing.
Now, let's go into our next part of loops and conditionals.
So let's talk about conditionals first.
So you might see something like this--
if calls less than 1, printf "Call more often!"
But what is actually going on here?
Well, again, several components to it, it's just like LEGOs.
It's like building blocks.
So the first one is Boolean expression.
We're checking some kind of condition.
We're taking that variable, calls, where we
are storing four or five or any other value,
and we're checking if it is less than one in this case.
If the expression is true, we're then going inside of our conditional,
these curly braces that are hugging our printf statement.
If the Boolean expression is actually true,
we're going to execute this conditional code.
So if calls is less than one, if it's zero or maybe even negative,
which is probably not possible, but we're going to printf,
"Call more often!"

If we have multiple situations that we would like to address,
this is where else statements come in.
So the first one can still be "if calls is less than one," right?
This is our first condition that we want to check.
And then, else takes care of all the other options.
So if calls is not less than one, we want to printf, "Thanks for calling!"
So it means that calls is either one or more.
So the Boolean expression was indeed false,
and we jumped to our next part of code.
And these are mutually exclusive.
So either one or the other can happen, and they're
separated by this else in the middle.
All right.
Chahab asked, referring to the previous exercise, in sake of style,
is it better to print out every information separate line?
That's a great question.
Yeah, you could have noticed that my line was getting a little long, right?
It was going off screen.
It depends on the situation.
Sometimes, you want to print out everything in one go and then
in the terminal jump between the lines.
But sometimes, you want to print it out in different printf statements.
And that's totally fine as well.
All right.
Let's move into loops.
So next, we're going to talk about while loops and for loops.
And let's start with while loops.
Again, we're going to break down some of the components.
And the first one that we have going top to bottom is initialization.
So we're creating this variable i, and we're setting it to zero.
And that's going to be our count, right?
It's going to be the variable that helps us
make sure we're doing the right number of repetitions or loops.
So the next part is Boolean expression, something that we just saw.
The comparison is going on.
We're going to get either true or false.
And if it is true, we're going to go into our next chunk
in the code that is hugged by these curly braces.
So if the Boolean expression is, indeed, correct,
we're going to go inside of our while conditional,
and I'm missing a step here.
We are first going to go into printf, right?
We're still going top to bottom.
So we're going to do printf.
We're going to print out i.
And the first iteration is going to be zero.
And then, we're going to increment, bumping an i by one,
and then going into the Boolean expression again.
So let's visualize it.
So again, let's go back to our boxes.
Let's try to picture these things in our heads.
So again, we're starting with int i equals zero.
We're creating this box.
We're storing value zero.
Second part is, is i less than one?
And it's sort of this message or idea that is going on.
Nothing gets printed out.
Nothing gets returned or changed in this step.
But it's still a step that we need to make.
So we're asking ourselves, is i less than two?
And i is less than two.
It's zero.
So then, we're going inside the curly braces.
We're going to printf, print out the value that i currently has,
which is zero.
And next step, we're going to increment i by one.
And as someone said before, another option, another way to do it is i++.
Both formats are correct.
Next, we're going to go back to our Boolean expression.
Note that we're not going back to int i equals zero.
We've done that step.
We're past it.
We're now coming back to the Boolean expression.
We ask ourselves, is i less than two?
Well, i is one, so yes, it is true.
We're going back inside.
We're printing out i, which is, in this case, one.
And now we're incrementing i by one again and now repeating the process
again and again.
So is i less than two?
Well, i is not less than 2.
i is 2.
So our Boolean expression is false.
And now, we will finish the program.
We're going to be passed this while loop and just left with what's on the right.
OK, so what are some other ways that we could do things?
So let's consider this block inside, the printf and the i++.
Let's try translating it into for loops like one of our other tools
that we have.
So notice how we're still grabbing the printf portion.
That is the part of code that's going to go with us to the for loops.
And going to the next slide, we see exactly that.
So we kept the printf part.
And now, the first line looks very cryptic.
What is going on?
I see i++.
It looks similar.
i less than two but completely different format, right?
It's actually all the same things that we just saw on the previous slide.
So just like with the while loops, we're defining int i equals zero.
Just as with while loops, we're setting up our Boolean expression,
which is i less than 2.
And just as while loops, we're incrementing i++.
So we can think about it in the same ways
that we did with while loops, the initialization, the Boolean expression,
and the increment.
And then ultimately, we will printf our i in this case.
So still going through the same steps of initializing i to zero,
leaving it aside, and then going into the for loop, printing out
i one by one until we reach false with our Boolean expression.
OK, before we jump to the next part, which is actually talking about Mario,
one of the problems on the problem set, what questions
do we have about conditionals, for loops or while loops?

I'm going to stop here to look at the chat.

What is the do loop syntax?
I think you're referring to the do while loop.
And we'll actually see it in just a second
because we're going to talk about it as we're writing Mario.
Good question.

Any other questions about for loop, conditionals, while loops?

Yeah so Remy says, what to use what in these?
So it really depends on what you're trying to accomplish.
And as you saw, they're pretty interchangeable.
We can use either while loops or for loops.
Either or is fine.
But the way that I like to think about it,
you want to use for loops when you know the exact number of steps
you want to take.
You know that you're going to take two steps.
You can set the Boolean expression correctly and easily.
And the while loops are sort of a more fluid.
In this case, it is very similar.
We can translate while loop into the for loop easily.
But sometimes we don't know the exact like i is less than two.
Maybe it's some other condition.
Maybe it's, is it empty?
Is some variable empty, or have we reached the end of something?
So with while, you have more freedom to play around with different Boolean
expressions that you want to set versus for loops are more strict in that sense.
You have to have two, three, four count.
All right, so let's move on, and let's talk about Mario, which I think
is everyone's favorite problem set.
And it's a lot of fun.
But the problem at hand that we have is that if you are not familiar,
Mario is a video game where a character called
Mario hops around this imaginary world that
is built of bricks and other things.
So one of the images from the game is this pyramid
that goes dun, dun, dun, step by step, which is exactly what we
will try to build today.
So we will not build such a fancy image as we see here.
But we would want to build something like this,
like a right-sided pyramid that goes up in a similar way
as it does on the image.
But let's start with a left-aligned pyramid first.
This will be a little easier to tackle.
And for that, let's go back to our VS Code.
I'm going to clear the terminal, and I'm going to create--
oops.
I'm going to create a new file called Mario.
All right, I'm going to close these friends.
I'm going to clear the terminal.
So, again, building blocks, we have to make
sure we're including all the necessary things for our program to run.
And let's start with our headers.
So we're going to start with stdio.h.
I already know that I will need the CS50 library,
so I'm going to code that as well.
I'm going to create int main void, our main function.
And then, inside this main function, I'm going
to leave some comments for myself just to help me get through this process.
So the first one will be prompt user for input.
So as we saw here, the pyramid can be different sizes.
So in this case, the pyramid is of height six,
but it can be of height 5, 4, 3, 2.
We will leave this up to the user.
Then, the second step's print a pyramid.
Print a pyramid of that height.
So many typos.
All right, well, this is simple, right?
Two steps.
Why is everyone's making such a big deal out of it?
It's just two steps.
But it takes time, right?
It takes, again, building blocks and components to make this work.
So the first one, we've tackled before.
So we can deal with this right away.
So let's call it int height, and I'm going to print.
I'm going to prompt my user for an integer.
And I'm going to say, what is the height of the pyramid, question mark, leave
space, semicolon.
OK, next we want to print a pyramid of that height, right?
And that's where things get a little bit tricky.
How can we go from 0 to 100?
How can we go from knowing just how to print maybe one
hash at a time to printing multiple?
And I think you just saw me giving away the next slide a little bit.
But let's work on this together.
All right, so again, building blocks.
Let's start with the idea of printing a row, right?
So I want to print one row at a time, and this
is what I'm going to start with.
And for that, I'm going to create a separate helper function.
So I'm going to call it print_row.
And it has return type void and the input void because we're not taking--
sorry.
We're going to return type void, but we're actually
going to take in something.
We want to make sure that we're printing different length.
Our rows have to be different.
So we're going to put in the variable called int bricks.
Tell me how many bricks I need to print on each row.
And here, what I'm going to do is printf, printf hashtag.

And then, in here, what I'm going to do, I'm
just going to say print_row 4 semicolon.
So we've created a function, print_row, that
will take in the variable, int bricks.
We'll print some hashes.
And the way I know how many bricks to print is by passing in this value here.
So let me make Mario.
And I am running into the first issue.
So call to undeclared function to print_row.
How do I tackle this one?
Oh, beyond forgetting this guy, yes.
But how do I tackle the error?

Exactly, I also need to make sure I prototype it ahead of main.
So what I'm going to do, and as [INAUDIBLE] said,
this is the only acceptable time that you can copy-paste in CS50.
But I'm going to copy this guy and put it on the very top
before my main event starts.
And the reason I'm going to do that is because I'm
reading my program top to bottom.
So I'm going inside of main, and I'm going through line nine.
I'm getting input from the user.
And I'm getting line 12.
And without this prototype, main does not know what print_row is.
It can't look ahead and jump below it.
It just sees what it is, what it has right now, and what it's seen before.
So in order to avoid these errors, we have to prototype this function before.
Let's try to make it again.
So make Mario.
OK, compiles, that's a good sign.
And now, we're going to run it.
What is the height of the pyramid?
For example, five.
OK, I'm getting just one hash sign.
This is not at all what I wanted to do.
OK, I'm seeing some suggestions in the chat.
This was solving our scope issue.
OK, someone seems to put the entire solution in the chat already,
but let's take it step by step.
So right now, I'm just sort of printing our hash once.
What I really want to do is have some kind of for loop, do it multiple times.
And for that, I'm going to do just this, int i equals 0.
This is how we initialize it.
We're going to print out some number of bricks.
And bricks is exactly the variable that gives us that information.
So I'm going to set i less than bricks.
And I'm going to increment i at every step.
I'm going to move printf hashtag inside of the for loop, indent it.
Let's make Mario again.
OK, height of the pyramid?
Let's say four.
OK, it's printing out four hashes.
So that's a good--
that's a good sign.
But what if I want to make five hashes?
Still printing out four.
Where is my mistake here?
Why does it keep printing out four hashes even if I put five as a user?

Any suggestions?

So I can see that--
yeah, exactly.
I have print_row four.
So I don't want to hard code the number, right?
I want to make it dynamic.
So I'm going to change it to height.
And this way, whatever user input puts in,
I will be able to dynamically change that.
So let's make Mario again, and let's run it.
What is the height of the pyramid?
Let's say six.
And I'm seeing six hashes.
OK, that's a good sign.
But again, I'm missing the new line.
That's just so annoying.
So I'm going to go in here and create a new line.
And so I'm going to make Mario, Mario.
What's the height of the pyramid?
Five.
Ugh, this is not what I wanted again.
It's printing out in the column.
I still want it in the row.
What can I do different?
How can I change this?

Create a new line at the end of the loop, exactly.
So instead of creating a new line every time
I go through my for loop, what I'm going to do
is just printf a new line right here.
And let's make Mario--
oops-- semicolon, make Mario.
Run Mario.
What is the height of the pyramid?
Five.
OK, we have a row.
We have a row, people.
This is awesome.
So this is one of the first steps in our mission of creating a Mario pyramid.
OK, so what we did so far is created a separate function called print_row.
We created a for loop in which we print out hashes.
We also print out a new line every time we finish that for loop.
And then, we've already preset up some of those building blocks
inside of the main function.
I'm going to pause right here for a second
and ask what questions do we have about these steps so far.

What questions do we have about this code, the way we used our various tools?

Any questions about this so far?

All right, seeing none so let's keep moving along.
So let me just run this one more time to illustrate what we're tackling here.
So right now, I'm just printing out one row at a time.
But I want to have this stepping stone construction.
I want to have multiple rows.
So how can I do that?
Well, we're going to make use of for loops again.
So instead of just calling print_row function one time,
we can call it multiple times, again, using our for loops.
So in here, I'm going to create "for int i equals 0.
i is less than height.
i++."
And then inside of the for loop, I'm going to move this line of code
right here.
OK, let's make it.
Make Mario, Mario.
What's the height of the pyramid?
Four.
OK, so this is resembling what we need to do a little better,
so just having 4x4 grids, like a little square.
OK, let's see.
I see a question in the chat.
In the print_row int bricks, and declare any type of variable,
int is if we can manipulate by using inputs, width and height.
Yeah, so there are different functions which
have different variables that they use.
So even though we put in height right here,
we're referencing bricks inside of the print_row
because that is the variable-- that is the variable that is
defined within the scope of print_row.
And therefore, if my height in bricks just
match where I want them to match on the print_row input,
I can just be using bricks inside of my function
because this is what I defined earlier.
So here's the issue.
And let me propose that we can solve it.
But we have a 4x4 grid.
And it just seems to be doing the same thing over and over again, right?
It prints four hashes four times.
It's very static, right?
It's sort of almost constant, except for the fact
that we can get a different input from the user.
How can we make it more dynamic?
What is the variable inside our main function
that will give us this dynamic option?
What is the variable inside our main function that
keeps changing with every iteration?
Remy said, replace height with i.
Exactly, so you can notice that inside of our main function,
we have two variables, height and i.
And in fact, height, after the user inputted that number, that is it, right?
That is where it stays.
It does not change.
But i, on the other hand, changes with every iteration of the for loop.
It increments by one every time.
So let's do just that.
Let's make Mario.
Let's run Mario.
What is the height of the pyramid?
Four.
OK, this is looking a little better, but I would
say that I'm still missing something.
What am I missing here?

The height of the pyramid is supposed to be four.
So I should see 1, 2, 3, 4.
But I'm just seeing 1, 2, 3.
I'm missing one row.
Yeah, exactly, but how do I fix that?
How do I make it four rows where I need it?

Any suggestions of how we can change this code?
OK, so seeing some options.
i is less than height plus one, OK.
But that will just stop it.
But, I need to--
I'm missing something on the very first row, right?
I'm not printing out anything on the first row.

So maybe we can notice that in the beginning, we initialize i to zero.
This is where we initialize it for the first time. i is equal to zero.
So when I do print_row for the first time, I'm actually doing print_row zero.
So naturally, it's going to go inside of the print_row function.
And it's going to be i is less than zero.
But wait, int i equals zero.
i is less than zero already.
This will not work.
So on the first iteration, print_row function
is actually not going to print anything.
So we need to make some changes.
And for that, to solve that, we can do i plus one.
So instead of starting at i equals zero, we can start at i one.
And let's make Mario.
Let's run it.

What is the height of the pyramid?
Four.
And voila, I have my left-handed pyramid that
goes 1, 2, 3, 4 exactly as we intended.
Your task now is to make it go the other way.
Flip it.
Make it a right-sided pyramid.
But that you will tackle in your problem set.
And let me propose just one more thing.
So, for example, what happens if I do ./mario, and then I say negative two?
The pyramid is not printing.
Well, you can't really print out a pyramid of negative 2.
But I also don't want the program to kick me out completely.
I want it to give me give me another chance.
Maybe the next integer that I was going to put in
was actually going to be a good integer, a positive integer.
How can I fix that?
What can I do differently?

Yeah, Chahab is saying do while loop, exactly.
And this is where I promised that I'm going to show you
how the do while loop works.
So we can do just that.
In the very beginning, we're going to create a variable, int height.
And then later, we're going to use our do while loop.
And the way that it is set up is a little quirky, a little different
from what we saw.
So first, you're going to define the do action, something that has to happen.
And then the second part is the condition, your Boolean expression.
While something is true, do x.
So we're going to say height is less than one.
So this is sort of the contrary of what we're trying to accomplish.
So as long as height is less than one, 0, negative 2, negative 5,
keep prompting the user for the right input.
Do not stop until they give you the right input.
So I'm going to move this guy inside of the do while loop.
I'm going to delete int in front of height
because we've already done that on line 9.
And I'm going to make it.
So make Mario.
Oops, I forgot a semicolon.

I'm going to run Mario.
I'm going to say negative 2, negative 5, 0, 4.
OK, so this is now working as intended.
You see that it did not stop until I gave it the right input.
It kept reprompting me until I gave it the right thing.
Any questions about Mario, the do while loops,
for loops, the logic of how we arrived to this solution?

Any questions about this part?

Yes, I can go to the bottom.

Any questions at all?

All right, seeing none.
So let's go back and actually do a quick recap of the print_row function.
So we just wrote it, and we already talked about it.
Let's briefly consider, again, what are the components that go into it.
So we had our setup with print_row int bricks.
We're printing out one row of bricks at a time.
And again, just a good habit of breaking down things as you go.
So the first part is return type.
As we said, print_row does not return anything.
It just returns-- it just has a side effect of printing something.
Then the function name, print_row, which, again,
can be whatever you choose it to be.
Then, the next is input.
Int bricks is what we pass into our print_row function.
And then, lastly is some kind of action that we're going to take,
which is print row of bricks.
And again, coming back to our visualization, our boxes,
so if print_row is a box, and something is happening here,
so what we pass into this box is bricks.
So it is the variable that we grabbed from the user
or that we defined earlier in main.
We pass it into print_row.
And when we get out of it is a row of bricks, depending on the size of it.
So more specifically, if we had numbers--
if bricks equaled three, three bricks, we get out
is these three hashes in the end of using print_row function.
All right, this was a lot.
So I'm going to pause again and ask if folks
have any questions about return types, printing, placeholders, for loops,
conditionals, Mario.
We've done so many things today.
So if you have any questions at all, please feel free to type
them in the chat in the next minute or so?

All right, not seeing any questions.
So this is where we're going to wrap up.
So this was CS50 Week 1 section.
Thank you so much for tuning in.
We're going to be here every week at the same time.
Feel free to log into Zoom again in the coming weeks.
It was so nice to see all of you.
My name is Yuliia.
And hopefully, I'll see you next week.
Bye, everyone.
